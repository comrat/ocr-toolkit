#ifndef __OCR_RECOG__
#define __OCR_RECOG__

#define STAT_SYMB_COUNT 51

typedef struct{
	double zones[5][5];
	char symb;
} zone_stat_char;

const zone_stat_char zones[STAT_SYMB_COUNT] = {
	{	/* 1) a */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'a'
	}, {	/* 2) b */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'b'
	}, {	/* 3) c */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'c'
	}, {	/* 4) d */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'd'
	}, {	/* 5) e */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'e'
	}, {	/* 6) f */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'f'
	}, {	/* 7) g */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'g'
	}, {	/* 8) h */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'h'
	}, {	/* 9) i */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'i'
	}, {	/* 10) j */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'j'
	}, {	/* 11) k */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'k'
	}, {	/* 12) l */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'l'
	}, {	/* 13) m */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'm'
	}, {	/* 14) n */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'n'
	}, {	/* 15) o */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'o'
	}, {	/* 16) p */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'p'
	}, {	/* 17) q */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'q'
	}, {	/* 18) r */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'r'
	}, {	/* 19) s */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		's'
	}, {	/* 20) t */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		't'
	}, {	/* 21) u */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'u'
	}, {	/* 22) v */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'v'
	}, {	/* 23) w */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'w'
	}, {	/* 24) x */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'x'
	}, {	/* 25) y */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'y'
	}, {	/* 26) z */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'z'
	}, {	/* 27) A */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'A'
	/* 'C' - совпадает с маленькой 'c'. */
	}, {	/* 28) B */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'B'
	}, {	/* 29) D */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'D'
	}, {	/* 30) E */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'E'
	}, {	/* 31) F */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'F'
	}, {	/* 32) G */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'G'
	}, {	/* 33) H */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'H'
	}, {	/* 34) I */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'I'
	}, {	/* 35) J */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'J'
	}, {	/* 36) K */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'f'
	}, {	/* 37) L */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'L'
	}, {	/* 38) M */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'M'
	}, {	/* 39) N */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'N'
	}, {	/* 40) O */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'O'
	}, {	/* 41) P */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'P'
	}, {	/* 42) Q */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'Q'
	}, {	/* 43) R */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'R'
	}, {	/* 44) S */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'S'
	}, {	/* 45) T */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'T'
	}, {	/* 46) U */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'U'
	}, {	/* 47) V */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'q'
	}, {	/* 48) W */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'W'
	}, {	/* 49) X */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		's'
	}, {	/* 50) Y */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'Y'
	}, {	/* 51) Z */
		{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'Z'
	/* Русский алфавит. */
	/* 'a' аналогично англискому 'a'. */
	},// {	/* 52) б */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		208
	 'в' аналогично английскому 'в'. */
	//}, {	/* 53) г */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'г'
	*///}, {	/* 54) д */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'д'
	*//* 'е' аналогична английской 'е'. */
	//}, {	/* 55) ё */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ё'
	*///}, {	/* 56) ж */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ж'
	*///}, {	/* 57) з */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'з'
	*///}, {	/* 58) и */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'и'
	*///}, {	/* 59) й */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'й'
	*///}, {	/* 60) к */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'к'
	*///}, {	/* 61) л */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'л'
	*///}, {	/* 62) м */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'м'
	*///}, {	/* 63) н */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'н'
	*//* 'о' аналогична 'о'. */
	//}, {	/* 64) п */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'п'
	*///}, {	/* 65) р */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'р'
	*//* 'c' аналогична английской 'c'. */
	/* 'т' аналогична английской 'Т'. */
	//}, {	/* 66) у */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'у'
	*///}, {	/* 67) ф */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ф'
	*//* 'x' аналогична английской 'x'. */
	//}, {	/* 68) ц */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ц'
	*///}, {	/* 69) ч */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ч'
	*///}, {	/* 70) ш */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ш'
	*///}, {	/* 71) щ */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'щ'
	*///}, {	/* 72) ъ */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ъ'
	*///}, {	/* 73) ы */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ы'
	*///}, {	/* 74) ь */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ь'
	*///}, {	/* 75) э */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'э'
	*///}, {	/* 76) ю */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'ю'
	*///}, {	/* 77) я */
	/*	{{0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0},
		 {0, 0, 0, 0, 0}},
		'я'
	}*/
	/* Прочие символы. */
};

/** 3
 * ocr_recog_stat_lines_area - function returns text area
 * info array pointer to text lines and calculate its count
 * in \fIline_count\fP pointer. This method isn't invariant
 * for baseline angle it works correctly only for straight lines.
 *
 * RETURN VALUE
 * Function returns text area info array pointer to text lines
 * and calculate its count and return it in \fIline_count\fP pointer.
 * Returns \fINULL\fP if its failed.
 */
ocr_text_area *ocr_recog_stat_lines_area(ocr_text_area *text_area, int *line_count);

/** 3
 * ocr_recog_stat_words_area - function returns text area
 * info array pointer to words area and calculate its count
 * in \fIword_count\fP pointer. This method isn't invariant
 * for baseline angle it works correctly only for straight lines.
 *
 * RETURN VALUE
 * Function returns text area info array pointer to words
 * and calculate its count and return it in \fIword_count\fP pointer.
 * Returns \fINULL\fP if its failed.
 */
ocr_text_area *ocr_recog_stat_words_area(ocr_text_area *line_area, int *word_count);

/** 3
 * ocr_recog_stat_chars_area - function returns text area
 * info array pointer to chars area and calculate its count
 * in \fIchar_count\fP pointer. This method isn't invariant
 * for baseline angle it works correctly only for straight lines.
 *
 * RETURN VALUE
 * Function returns text area info array pointer to words
 * and calculate its count and return it in \fIchar_count\fP pointer.
 * Returns \fINULL\fP if its failed.
 */
ocr_text_area *ocr_recog_stat_chars_area(ocr_text_area *word_area, int *char_count);

ocr_text_area *ocr_recog_char_prop(ocr_text_area *t_area);

ocr_text_area *ocr_recog_hist_chars_area(ocr_text_area *word_area, int *char_count);

char ocr_recog_get_zone_char(ocr_text_area *char_area);

char ocr_recog_neural_network(ocr_text_area *input);

void ocr_recog_neural_network_learn(char c, ocr_text_area *input);

#endif /*__OCR_RECOG__*/
